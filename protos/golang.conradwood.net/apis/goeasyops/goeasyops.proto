syntax = "proto3";

package goeasyops;

option go_package = "golang.conradwood.net/apis/goeasyops";
import "golang.conradwood.net/apis/auth/auth.proto";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.yacloud.eu/apis/session/session.proto";
option java_package = "golang.conradwood.net.goeasyops";

/**************
this package does not include a client because it would be a circular import.
this package is imported by goeasyops packages
 **************/

//******************************************************************
// what follows is data within a context
//******************************************************************


// this is transported within the Context of a call. This proto is on-purpose very brief and static so that old versions of go-easyops can handle it
message InContext {
  ImmutableContext ImCtx=1;
  MutableContext MCtx=2;
}
// this must not be changed throughout its lifetime. furthermore, go-easyops _must_ transport this as-is (preserving unknown fields)
message ImmutableContext {
  string RequestID=1; // a request id for a call
  auth.SignedUser CreatorService=2; // which service created this context (nil if not created by a service)
  auth.SignedUser User=3; // the user making this RPC call
  auth.SignedUser SudoUser=4; // the permissions to use for this RPC call
  session.Session Session=5; // this session, may be nil if this is not a "session"
}
// this may change. fields are not guaranteed to be preserved
message MutableContext {
  auth.SignedUser CallingService=1; // the most recent service (the service making the call)
  bool Debug=2; // if debug is enabled for this call
  bool Trace=3; // if trace is enabled for this call
  CTXRoutingTags Tags=4;
  repeated string ServiceIDs=5; // each service adds its ID
}

/*
Routing tags are part of a context. Rules to match tags when looking for a suitable target service instance are as follows:

If FallbackToPlain == false then:

- if context has no tags - use any instance

- if context has tags - only use instance that matches exactly (with all tags)

If FallbackToPlain == true then:

- if context has no tags - use any instance

- if context has tags - if at least one instance matches exactly (with all tags), use only that. if none matches, but at least one instance has no tags, use that.

Propagate: If it is true, the routing tags are kept as-is, otherwise the first target service will strip routing tags out

 */
message CTXRoutingTags {
  map<string,string> Tags=1;
  bool FallbackToPlain=2; // if true, fallback to any service with NO tags, if no service with MATCHING tags is found
  bool Propagate=3;  // if true, propagate as part of the rpc call
}

// a single error can only hold a single proto
message GRPCErrorList {
  repeated GRPCError Errors=1;
}

// parsed on boot
message Config {
  string Registry=1;
}

message GRPCError {
  string UserMessage=1;
  string LogMessage=2;
  string MethodName=3; // the method which returned the error
  string ServiceName=4; // the service which returned the error
  string CallingServiceID=5; // the service which called the method which returned the error
  string CallingServiceEmail=6; // the service which called the service/method which returned the error
}


// a postgres configuration
message PostgresConfig {
  string Host=1;
  string DB=2;
  string User=3;
  string PW=4;
  uint32 MaxConnections=5; // optional: if 0, assumes go-easyops default
  uint32 MaxIdleSecs=6; // optional: if 0, assumes go-easyops default
}

// send in response to unixipc STOPREQUEST
message StopUpdate {
  bool Stopping=1;
  uint32 ActiveRPCs=2;
}